# http context needed to define server context
http {
    # We could define types of files here but don't need to
    # because nginx already have a file called mime.types which has all the types.
    # types {
    #   text/html   html;
    #    text/css    css;
    # }
    include mime.types;

    upstream backendserver {
        server 127.0.0.1:1111;
        server 127.0.0.1:2222;
        server 127.0.0.1:3333;
        server 127.0.0.1:4444;
    }

    server {
        # Defining key-value pairs. They're called directives.
        listen 8080;
        root /Users/semihozturk/Desktop/nginx-demo;

        # Using rewrite instead of redirect which won't change the URL
        rewrite ^/number/(\w+) /count/$1;

        location / {
            # This will round-robin the requests to the servers defined in the upstream block
            # Acting like a load balancer
            proxy_pass http://backendserver;
        }

        # we may also use regex in location
        location ~* /count/[0-9] {
            root /Users/semihozturk/Desktop/nginx-demo;
            try_files /index.html =404;
        }

        #/secret will be added to the end of the URL
        location /secret {
            root /Users/semihozturk/Desktop/nginx-demo/; 
        }

        location /backup {
            # alias wont add the location to the end of the URL(/backup)
            alias /Users/semihozturk/Desktop/nginx-demo/secret;
        }

        location /semisecret {
            root /Users/semihozturk/Desktop/nginx-demo;
            # try to find the file in the first argument, if it doesn't exist, try the second argument, if it doesn't exist, return 404
            try_files /semisecret/secss.html /index.html =404;
        }

        # /topsecret will be redirected to /secret
        location /topsecret {
            return 307 /secret;    
        }
    }
}

events{}